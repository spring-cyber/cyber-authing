<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.cyber.authing.mapper.ProjectUserMapper">    <sql id="baseColumns">        id        , project_id, user_id, role_id, status, tenant_code, deleted, creator, create_time, updator, update_time, remark, version    </sql>    <sql id="updateColumns">        <set>            <if test="id != null">                id = #{id},            </if>            <if test="projectId != null">                project_id = #{projectId},            </if>            <if test="userId != null">                user_id = #{userId},            </if>            <if test="roleId != null">                role_id = #{roleId},            </if>            <if test="status != null">                status = #{status},            </if>            <if test="tenantCode != null">                tenant_code = #{tenantCode},            </if>            <if test="deleted != null">                deleted = #{deleted},            </if>            <if test="creator != null">                creator = #{creator},            </if>            <if test="createTime != null">                create_time = #{createTime},            </if>            <if test="updator != null">                updator = #{updator},            </if>            <if test="updateTime != null">                update_time = #{updateTime},            </if>            <if test="remark != null">                remark = #{remark},            </if>            <if test="version != null">                version = #{version},            </if>        </set>    </sql>    <sql id="whereClause">        <trim prefix="WHERE" prefixOverrides="AND">            <if test="id != null">                AND ${columnPrefix}id = #{id}            </if>            <if test="projectId != null">                AND ${columnPrefix}project_id = #{projectId}            </if>            <if test="userId != null">                AND ${columnPrefix}user_id = #{userId}            </if>            <if test="roleId != null">                AND ${columnPrefix}role_id = #{roleId}            </if>            <if test="status != null">                AND ${columnPrefix}status = #{status}            </if>            <if test="tenantCode != null">                AND ${columnPrefix}tenant_code = #{tenantCode}            </if>            <if test="deleted != null">                AND ${columnPrefix}deleted = #{deleted}            </if>            <if test="creator != null">                AND ${columnPrefix}creator = #{creator}            </if>            <if test="createTime != null">                AND ${columnPrefix}create_time = #{createTime}            </if>            <if test="updator != null">                AND ${columnPrefix}updator = #{updator}            </if>            <if test="updateTime != null">                AND ${columnPrefix}update_time = #{updateTime}            </if>            <if test="remark != null">                AND ${columnPrefix}remark = #{remark}            </if>            <if test="version != null">                AND ${columnPrefix}version = #{version}            </if>        </trim>    </sql>    <insert id="save" parameterType="ProjectUser">        insert into project_user        (<include refid="saveColumn"/>)        values        (<include refid="saveValue"/>)    </insert>    <sql id="saveColumn">        <trim suffixOverrides=",">            <if test="id!= null">id,</if>            <if test="projectId!= null">project_id,</if>            <if test="userId!= null">user_id,</if>            <if test="roleId!= null">role_id,</if>            <if test="status!= null">status,</if>            <if test="tenantCode!= null">tenant_code,</if>            <if test="deleted!= null">deleted,</if>            <if test="creator!= null">creator,</if>            <if test="createTime!= null">create_time,</if>            <if test="updator!= null">updator,</if>            <if test="updateTime!= null">update_time,</if>            <if test="remark!= null">remark,</if>            <if test="version!= null">version,</if>        </trim>    </sql>    <sql id="saveValue">        <trim suffixOverrides=",">            <if test="id!= null">#{id},</if>            <if test="projectId!= null">#{projectId},</if>            <if test="userId!= null">#{userId},</if>            <if test="roleId!= null">#{roleId},</if>            <if test="status!= null">#{status},</if>            <if test="tenantCode!= null">#{tenantCode},</if>            <if test="deleted!= null">#{deleted},</if>            <if test="creator!= null">#{creator},</if>            <if test="createTime!= null">#{createTime},</if>            <if test="updator!= null">#{updator},</if>            <if test="updateTime!= null">#{updateTime},</if>            <if test="remark!= null">#{remark},</if>            <if test="version!= null">#{version},</if>        </trim>    </sql>    <insert id="batchSaveAndUpdate" parameterType="list">        insert into project_user(id, project_id, user_id, role_id, status, tenant_code, deleted, creator, create_time,        updator, update_time, remark, version)        values        <foreach collection="list" item="item" separator="," open="" close="">            (#{item.id}, #{item.projectId}, #{item.userId}, #{item.roleId}, #{item.status}, #{item.tenantCode},            #{item.deleted}, #{item.creator},            #{item.createTime},#{item.updator},#{item.updateTime},#{item.remark}, #{item.version})        </foreach>        on duplicate key update role_id = values(role_id),        status = values(status),        deleted = values(deleted),        update_time = values(update_time),        remark = values(remark),        version = values(version),        updator = values(updator)    </insert>    <delete id="deleteById" parameterType="ProjectUser">        DELETE        FROM project_user        WHERE id = #{id}          and tenant_code = #{tenantCode}    </delete>    <delete id="deleteByIds" parameterType="list">        DELETE FROM project_user        where id in        <foreach collection="list" item="item" open="(" close=")" separator=",">            #{item.id}        </foreach>    </delete>    <update id="updateById" parameterType="ProjectUser">        update project_user        <include refid="updateColumns"/>        where id = #{id}        and tenant_code = #{tenantCode}    </update>    <select id="selectOne" resultType="ProjectUser" parameterType="ProjectUser">        SELECT        <include refid="baseColumns"/>        FROM project_user        <include refid="whereClause">            <property name="columnPrefix" value=""/>        </include>    </select>    <select id="selectByIndexCount" parameterType="ProjectUser" resultType="int">        SELECT count(1)        FROM project_user        <include refid="whereClause">            <property name="columnPrefix" value=""/>        </include>    </select>    <select id="selectByIndex" parameterType="ProjectUser" resultType="ProjectUser">        SELECT        <include refid="baseColumns"/>        FROM project_user        <include refid="whereClause">            <property name="columnPrefix" value=""/>        </include>        ORDER BY #{sortBy} #{sortType}        LIMIT ${offset} , ${limit}    </select></mapper>